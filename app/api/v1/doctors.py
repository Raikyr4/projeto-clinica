
from typing import List
from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from uuid import UUID
from app.database import get_db
from app.schemas.user import UserResponse
from app.schemas.profile import DoctorProfileResponse
from app.models.user import User
from app.core.enums import UserRole

router = APIRouter(prefix="/doctors", tags=["M√©dicos"])

@router.get("", response_model=List[UserResponse])
def list_doctors(
    skip: int = Query(0, ge=0),
    limit: int = Query(20, ge=1, le=100),
    db: Session = Depends(get_db)
):
    """Lista todos os m√©dicos (p√∫blico)."""
    doctors = db.query(User).filter(
        User.role == UserRole.MEDICO,
        User.ativo == True
    ).offset(skip).limit(limit).all()
    return doctors

@router.get("/{doctor_id}", response_model=UserResponse)
def get_doctor(
    doctor_id: UUID,
    db: Session = Depends(get_db)
):
    """Consulta m√©dico por ID (p√∫blico)."""
    doctor = db.query(User).filter(
        User.id == doctor_id,
        User.role == UserRole.MEDICO
    ).first()
    
    if not doctor:
        raise HTTPException(status_code=404, detail="M√©dico n√£o encontrado")
    
    return doctor

@router.get("/{doctor_id}/profile", response_model=DoctorProfileResponse)
def get_doctor_profile(
    doctor_id: UUID,
    db: Session = Depends(get_db)
):
    """Consulta perfil do m√©dico (p√∫blico)."""
    doctor = db.query(User).filter(
        User.id == doctor_id,
        User.role == UserRole.MEDICO
    ).first()
    
    if not doctor or not doctor.doctor_profile:
        raise HTTPException(status_code=404, detail="Perfil de m√©dico n√£o encontrado")
    
    return doctor.doctor_profile


# README.md

"""
# API Cl√≠nica de Psicologia

Sistema completo de gest√£o para cl√≠nicas de psicologia com autentica√ß√£o JWT, RBAC e PostgreSQL.

## üöÄ Tecnologias

- **Python 3.11+**
- **FastAPI** - Framework web
- **SQLAlchemy 2.x** - ORM
- **Alembic** - Migrations
- **PostgreSQL** - Banco de dados
- **JWT** - Autentica√ß√£o
- **Bcrypt** - Hash de senhas

## üìã Pr√©-requisitos

1. Python 3.11 ou superior
2. PostgreSQL 14+ instalado e rodando
3. Pip para gerenciar pacotes

## üîß Instala√ß√£o

### 1. Clone o reposit√≥rio e instale depend√™ncias

```bash
# Criar ambiente virtual
python -m venv venv

# Ativar ambiente (Windows)
venv\\Scripts\\activate

# Ativar ambiente (Linux/Mac)
source venv/bin/activate

# Instalar depend√™ncias
pip install -r requirements.txt
```

### 2. Configurar banco de dados

```sql
-- Conecte no PostgreSQL como superusu√°rio e execute:
CREATE DATABASE clinica_psicologia;
```

Depois execute o script SQL de cria√ß√£o das tabelas e seeds fornecido no prompt.

### 3. Configurar vari√°veis de ambiente

Copie o arquivo `.env.example` para `.env` e ajuste:

```bash
DATABASE_URL=postgresql+psycopg2://postgres:SUA_SENHA@localhost:5432/clinica_psicologia
SECRET_KEY=sua_chave_secreta_super_segura_aqui_min_32_chars_gere_uma_aleatoria
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60
REFRESH_TOKEN_EXPIRE_DAYS=7
```

### 4. Executar migrations (opcional - se usar Alembic)

```bash
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
```

## ‚ñ∂Ô∏è Executar a aplica√ß√£o

```bash
uvicorn app.main:app --reload
```

A API estar√° dispon√≠vel em: http://localhost:8000

- **Documenta√ß√£o Swagger**: http://localhost:8000/docs
- **Documenta√ß√£o ReDoc**: http://localhost:8000/redoc

## üë• Usu√°rios de Teste (Seeds)

### Admin
- Email: `admin@clinica.local`
- Senha: `Admin@123`

### M√©dicos
- Dra. Ana Silva: `ana.silva@clinica.local` / `Medico@123`
- Dr. Bruno Souza: `bruno.souza@clinica.local` / `Medico@123`

### Pacientes
- Carla: `carla@exemplo.com` / `Paciente@123`
- Diego: `diego@exemplo.com` / `Paciente@123`
- Eva: `eva@exemplo.com` / `Paciente@123`

## üîê Autentica√ß√£o

1. **Registrar novo paciente** (p√∫blico):
```bash
POST /api/v1/auth/register
{
  "nome": "Jo√£o Silva",
  "email": "joao@exemplo.com",
  "cpf": "12345678901",
  "password": "Senha@123"
}
```

2. **Login**:
```bash
POST /api/v1/auth/login
{
  "email": "joao@exemplo.com",
  "password": "Senha@123"
}
```

Retorna:
```json
{
  "access_token": "eyJ...",
  "refresh_token": "eyJ...",
  "token_type": "bearer"
}
```

3. **Usar o token nas requisi√ß√µes**:
```
Authorization: Bearer eyJ...
```

## üìö Principais Endpoints

### Autentica√ß√£o
- `POST /api/v1/auth/register` - Auto-cadastro de paciente
- `POST /api/v1/auth/login` - Login
- `POST /api/v1/auth/refresh` - Renovar token
- `GET /api/v1/auth/me` - Usu√°rio atual

### Usu√°rios (Admin)
- `POST /api/v1/users` - Criar usu√°rio (qualquer role)
- `GET /api/v1/users` - Listar usu√°rios
- `GET /api/v1/users/{id}` - Consultar usu√°rio
- `PUT /api/v1/users/{id}` - Atualizar usu√°rio
- `DELETE /api/v1/users/{id}` - Deletar usu√°rio

### Perfis
- `GET /api/v1/profiles/doctor/me` - Meu perfil (m√©dico)
- `PUT /api/v1/profiles/doctor/me` - Atualizar perfil (m√©dico)
- `GET /api/v1/profiles/patient/me` - Meu perfil (paciente)
- `PUT /api/v1/profiles/patient/me` - Atualizar perfil (paciente)

### M√©dicos (P√∫blico)
- `GET /api/v1/doctors` - Listar m√©dicos
- `GET /api/v1/doctors/{id}` - Consultar m√©dico
- `GET /api/v1/doctors/{id}/profile` - Perfil do m√©dico

### Agenda
- `GET /api/v1/doctors/{id}/agenda` - Ver agenda (p√∫blico)
- `POST /api/v1/doctors/{id}/agenda/slots` - Criar slot (Admin/M√©dico)
- `DELETE /api/v1/agenda/slots/{id}` - Deletar slot

### Consultas
- `POST /api/v1/appointments` - Agendar consulta
- `GET /api/v1/appointments` - Listar consultas
- `PATCH /api/v1/appointments/{id}/status` - Atualizar status

### Pagamentos
- `POST /api/v1/payments` - Criar pagamento
- `GET /api/v1/payments` - Listar pagamentos
- `GET /api/v1/payments/{id}` - Consultar pagamento

## üß™ Testes

```bash
pytest tests/ -v
```

## üìä Regras de Neg√≥cio

1. **PACIENTE** pode se auto-cadastrar
2. **M√âDICO** e **ADMIN** s√≥ podem ser criados por ADMIN
3. Reserva de slot √© **at√¥mica** (sem overbooking)
4. Pagamentos s√£o sempre **aprovados** (simula√ß√£o)
5. Apenas slots **LIVRE** podem ser deletados
6. Cada papel tem acesso restrito aos seus pr√≥prios dados

## üèóÔ∏è Estrutura do Projeto

```
clinica_psicologia/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ main.py              # Aplica√ß√£o FastAPI
‚îÇ   ‚îú‚îÄ‚îÄ config.py            # Configura√ß√µes
‚îÇ   ‚îú‚îÄ‚îÄ database.py          # Conex√£o DB
‚îÇ   ‚îú‚îÄ‚îÄ models/              # Modelos SQLAlchemy
‚îÇ   ‚îú‚îÄ‚îÄ schemas/             # Schemas Pydantic
‚îÇ   ‚îú‚îÄ‚îÄ api/                 # Routers
‚îÇ   ‚îú‚îÄ‚îÄ services/            # L√≥gica de neg√≥cio
‚îÇ   ‚îî‚îÄ‚îÄ core/                # Security, enums
‚îú‚îÄ‚îÄ tests/                   # Testes
‚îú‚îÄ‚îÄ alembic/                 # Migrations
‚îî‚îÄ‚îÄ requirements.txt
```

## üìù Licen√ßa

MIT
"""
