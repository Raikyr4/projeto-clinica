
==============================
WINDOWS - SETUP & RUN (PowerShell)
==============================

# Abra o PowerShell na pasta onde está o ZIP do projeto reconstruído.

# 0) (Opcional) Permitir scripts de ativação do venv (evita erro de execução)
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

# 1) Descompactar o projeto (ajuste o nome do ZIP se necessário)
Expand-Archive -Path .\clinica_api_reconstruida.zip -DestinationPath .

# 2) Entrar na pasta do projeto
cd .\clinica_api_reconstruida

# 3) Criar e ativar ambiente virtual
py -m venv .venv
.\.venv\Scripts\Activate.ps1

# 4) (Opcional) Se ainda existir "alembic" no requirements, remover
(Get-Content requirements.txt) | Where-Object { $_ -notmatch '^alembic' } | Set-Content requirements.txt

# 5) Atualizar pip/setuptools/wheel e instalar dependências
py -m pip install --upgrade pip setuptools wheel
pip install -r requirements.txt

# 6) Criar o arquivo .env a partir do exemplo
Copy-Item .env.example .env

# 7) Gerar uma SECRET_KEY forte automaticamente no .env
python -c "import secrets,re; p='.env'; s=open(p,encoding='utf-8').read(); k=secrets.token_urlsafe(64); s=re.sub(r'^SECRET_KEY=.*$', f'SECRET_KEY={k}', s, flags=re.M); open(p,'w',encoding='utf-8').write(s); print('SECRET_KEY atualizada');"

# 8) Ajustar a conexão do banco (DATABASE_URL) no .env
# Substitua SUA_SENHA pelo valor correto (e ajuste host/porta se necessário)
# Exemplo: postgresql+psycopg2://postgres:SUA_SENHA@localhost:5432/clinica_psicologia
# (Edite manualmente no Notepad OU use o replace abaixo)
# NOTA: edite a linha abaixo antes de rodar, colocando sua senha no lugar de SUA_SENHA.
(Get-Content .env) -replace '^DATABASE_URL=.*$', 'DATABASE_URL=postgresql+psycopg2://postgres:SUA_SENHA@localhost:5432/clinica_psicologia' | Set-Content .env

# 9) (Opção A) Usar PostgreSQL instalado no Windows
# Criar o banco (se o psql estiver no PATH)
psql -U postgres -h localhost -c "CREATE DATABASE clinica_psicologia;"

# 9.1) Rodar SEUS scripts SQL (schema e seed) manualmente
# Ajuste os caminhos dos seus .sql conforme necessário:
# psql -U postgres -h localhost -d clinica_psicologia -f .\scripts\01_schema.sql
# psql -U postgres -h localhost -d clinica_psicologia -f .\scripts\02_seed.sql

# 9) (Opção B) Usar PostgreSQL via Docker (alternativa à Opção A)
# - Requer Docker Desktop instalado e em execução
docker run --name pg-clinica -e POSTGRES_PASSWORD=SUA_SENHA -p 5432:5432 -d postgres:15
docker exec -it pg-clinica psql -U postgres -c "CREATE DATABASE clinica_psicologia;"
# Rodar SEUS scripts SQL dentro do container (copiando antes, por exemplo):
# docker cp .\scripts\01_schema.sql pg-clinica:/01_schema.sql
# docker cp .\scripts\02_seed.sql pg-clinica:/02_seed.sql
# docker exec -it pg-clinica psql -U postgres -d clinica_psicologia -f /01_schema.sql
# docker exec -it pg-clinica psql -U postgres -d clinica_psicologia -f /02_seed.sql

# 10) Subir a API
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

# 11) Testes rápidos (em outro PowerShell, com o venv ativo)
# Verificar healthcheck:
# iwr http://localhost:8000/health
# Abrir a documentação:
# start http://localhost:8000/docs

# 12) Encerrar (opcional)
# Para parar o servidor, pressione Ctrl+C no terminal onde o uvicorn está rodando.
# Desativar o ambiente virtual:
# deactivate
